#ifndef _HEADER_FILE_CF_CONV_HPP_
#define _HEADER_FILE_CF_CONV_HPP_

#ifdef WIN32
#include <windows.h> 

inline int cf_conv_get_codepage(void)
{
	int dstCodePage = GetACP();
    if(936==dstCodePage || 950==dstCodePage) return dstCodePage;
    else return 936;
}

inline std::wstring cf_conv_utf8_to_unicode(const std::string & src)
{	
	int dstCodePage = cf_conv_get_codepage();
	int len = MultiByteToWideChar(dstCodePage,0,src.c_str(),src.size(),NULL,0);	
	std::wstring szDst(len+1,0);
	if(0==::MultiByteToWideChar(dstCodePage,0,src.c_str(),src.size(),&szDst[0],len))
        szDst.resize(0); // Failed.
	return szDst;
}

inline std::wstring cf_A2W(const std::string & src)
{	
	return cf_conv_utf8_to_unicode(src);
}


inline std::string cf_conv_unicode_to_utf8(const wstring & src)
{
    int iTextLen = WideCharToMultiByte( CP_UTF8, 0, src.c_str(), -1, NULL, 0, NULL, NULL );
    std::string szDst(iTextLen + 1, 0);
    if(0==::WideCharToMultiByte( CP_UTF8, 0, src.c_str(), -1, &szDst[0], iTextLen, NULL, NULL ))
        szDst.resize(0); // Failed.
    return szDst;
}

inline std::string cf_W2A(const wstring & src)
{	
	return cf_conv_unicode_to_utf8(src);
}

#else
#endif  

#endif // _HEADER_FILE_CF_CONV_HPP_

